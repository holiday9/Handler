class LooperThread extends Thread {
      public Handler mHandler;
      
      public void run() {
          Looper.prepare();
          
          mHandler = new Handler() {
              public void handleMessage(Message msg) {
                  // process incoming messages here
              }
          };
          
          Looper.loop();
      }
  }
需要做很多约定才能明白．里面真正的含义．

？　handler send 一个message到它被 public void handleMessage(Message msg)  调用的过程
  入口：
mHandler2.sendEmptyMessage(MSG_DOWNLOAD_FINISH);
.....
追踪到1:
public boolean sendMessageAtTime(Message msg, long uptimeMillis)
    {
        boolean sent = false;
        MessageQueue queue = mQueue;
        if (queue != null) {
            msg.target = this;
            sent = queue.enqueueMessage(msg, uptimeMillis);    //入队...   关于入队的细节可以从这里查看
        }
        else {
            RuntimeException e = new RuntimeException(
                this + " sendMessageAtTime() called with no mQueue");
            Log.w("Looper", e.getMessage(), e);
        }
        return sent;
    }
入队之后的取:
Handler的构造函数
    public Handler() {
       ...
        mLooper = Looper.myLooper();
        if (mLooper == null) {
            throw new RuntimeException(
                "Can't create handler inside thread that has not called Looper.prepare()");
        }
        mQueue = mLooper.mQueue;
        mCallback = null;
    }
mQueue  跟追踪到1 用的相同的队列.都来自Looper.
我们来看看Looper
通过名字很容易看到
public static final void loop() {
        Looper me = myLooper();
        MessageQueue queue = me.mQueue;
        while (true) {
            Message msg = queue.next(); // might block   这里就是从队列里面取了.  跟handler的协作就是通过这个队列.
            //if (!me.mRun) {
            //    break;
            //}
            if (msg != null) {
                if (msg.target == null) {
                    // No target is a magic identifier for the quit message.
                    return;
                }
                if (me.mLogging!= null) me.mLogging.println(
                        ">>>>> Dispatching to " + msg.target + " "
                        + msg.callback + ": " + msg.what
                        );
                msg.target.dispatchMessage(msg);                // 这里就是我们最后要追踪的调用了.
                if (me.mLogging!= null) me.mLogging.println(
                        "<<<<< Finished to    " + msg.target + " "
                        + msg.callback);
                msg.recycle();
            }
        }
    }




？ mLooper = Looper.myLooper();　都是去类的默认　Lopper，如果我一个线程创建了新的handler后，再在主线程创建ｈａｎｄｌｅｒ，那么ｈａｎｄｌｅｒ内部所属的Ｌｏｏｐｅｒ从属于哪个线程．

线面是在线程中创建handler的例子
class LooperThread extends Thread {
      public Handler mHandler;
      
      public void run() {
          Looper.prepare();
          
          mHandler = new Handler() {
              public void handleMessage(Message msg) {
                  // process incoming messages here
              }
          };
          
          Looper.loop();
      }
  }

追踪 :
 public static final void prepare() {
        if (sThreadLocal.get() != null) {
            throw new RuntimeException("Only one Looper may be created per thread");
        }
        sThreadLocal.set(new Looper());  // 在这里可以看到sThreadLocal使每个Ｔｈｒｅａｄ
        // 有且仅有一个Looper．　如果相知可以继续更总
       }
​

创建handler时候,时刻记住一个条件,创建的那一个代码是从属于一个线程的.
? 怎么保证各自线程所使用的handler在各自线程中中被调用.比如主线调用的时候,处理的时候还是主线程.
Looper.loop()是运行在主线程的.

? 为什么handler包含activity的引用.











